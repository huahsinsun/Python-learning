"""关于列表的练习"""
# #region
# """
# 练习项目1：列表创建和访问
# 描述：
# 创建一个包含数字1到10的列表。
# 访问列表中的第一个元素和最后一个元素，并打印出来。
#
# 练习项目2：列表切片
# 描述：
# 创建一个包含字母 ['a', 'b', 'c', 'd', 'e', 'f', 'g'] 的列表。
# 使用切片获取从第二个元素到第四个元素（包含）的子列表，并打印出来。
#
# 练习项目5：检查元素是否存在
# 创建一个包含数字 [1, 2, 3, 4, 5] 的列表。
# 检查数字3是否在列表中，并打印结果。
# 检查数字6是否在列表中，并打印结果
#
# 练习项目6：列表的基本操作
# 创建一个包含数字 [1, 2, 3, 4, 5] 的列表。
# 向列表末尾追加一个元素6。
# 在列表索引2的位置插入一个元素99。
# 删除列表中第一个出现的元素3。
# 打印修改后的列表。
# """
# a=[]
# for i in range(10):
#     a.append(i+1)
# print("first value:{} final value:{}".format(a[0],a[-1]))
#
# b=['a', 'b', 'c', 'd', 'e', 'f', 'g']
# print(b[1:5])
#
# c=[1,2,3,4,5]
# print(3 in c)
# print(6 in c)
# d=[1,2,3,4,5]
# d.append(6)
# d.insert(1,99)
# d.remove(3)
# print(d)
# """
# 练习项目7：列表的高级操作
# 创建一个包含数字 [10, 2, 2, 5, 6] 的列表。
# 找出元素2在列表中的第一个索引，并打印出来。
# 统计列表中元素2的出现次数，并打印出来。
# 对列表进行排序，并打印排序后的列表。
# 反转列表元素的顺序，并打印反转后的列表。
#
# 练习项目8：列表推导式
# 使用列表推导式创建一个包含0到9的平方数的列表，并打印出来。
#
# 练习项目9：内置函数操作
# 创建一个包含数字 [10, 20, 30, 40, 50] 的列表。
# 计算并打印列表中所有元素的和。
# 找出并打印列表中的最小值和最大值。
#
# 练习项目10：将其他可迭代对象转换为列表
# 将字符串 "hello" 转换为列表，并打印结果。
# 将元组 (1, 2, 3) 转换为列表，并打印结果。
# """
# # 练习项目7：列表的高级操作
# lst = [10, 2, 2, 5, 6]
# index_of_2 = lst.index(2)
# count_of_2 = lst.count(2)
# lst.sort()
# lst.reverse()
# print("元素 2 的第一个索引:", index_of_2)
# print("元素 2 的出现次数:", count_of_2)
# print("排序后的列表:", lst)
# print("反转后的列表:", lst)
#
# #8练习项目8:推导列表
# lst_8 = [x**2 for x in range(10)]
# print(lst_8)
#
# lst_9 = [x*10+10 for x in range(6)]
# print("lst_9 is :{} \nthe sum is:{}".format(lst_9,sum(lst_9)))
# print(min(lst_9),lst_9.index(min(lst_9)))
#
# lst_10 = ["hello",(1,2,3)]
# a = list(lst_10[1])
# print(a)
# #endregion

#regoin
"""
练习项目1：创建和访问元组
描述：
1. 创建一个包含多个不同类型元素（整数、字符串、浮点数）的元组。
2. 访问并打印元组中的第一个元素和最后一个元素。
"""
tup = (1,'dsa',2.5)
print(tup[1],tup[-1])
"""
练习项目2：元组切片
描述：
1. 创建一个包含字母 ('a', 'b', 'c', 'd', 'e', 'f', 'g') 的元组。
2. 使用切片获取从第二个元素到第四个元素（包含）的子元组，并打印出来。
"""
tup=('a', 'b', 'c', 'd', 'e', 'f', 'g')
print(tup[1:4])
"""
练习项目3：元组连接与复制
描述：
1. 创建两个元组 tuple1 = (1, 2, 3) 和 tuple2 = ('a', 'b', 'c')。
2. 将两个元组连接起来并打印结果。
3. 将连接后的元组复制两次并打印结果。
"""
tup1 = (1,2,3)
tup2 = ('a','b','c')
print((tup1+tup2)*2)
"""
练习项目4：检查元素是否存在
描述：
1. 创建一个包含数字 (1, 2, 3, 4, 5) 的元组。
2. 检查数字3是否在元组中，并打印结果。
3. 检查数字6是否在元组中，并打印结果。
"""
tup=(1,2,3,4,5)
print(3 in tup,6 in tup)
"""
练习项目5：元组遍历
描述：
1. 创建一个包含多个元素的元组。
2. 使用 for 循环遍历元组中的所有元素，并逐个打印。
"""
for i in tup:
    print(i,end='')
"""
练习项目6：元组解包
描述：
1. 创建一个包含三个元素的元组。
2. 使用解包将元组的元素分别赋值给三个变量，并打印这些变量的值。
"""
a=(1,2,3)
b,c,d=a
print(b,c,d)
"""
练习项目7：部分解包
描述：
1. 创建一个包含五个元素的元组。
2. 使用星号 * 进行部分解包，将第一个元素赋值给一个变量，将中间的多个元素赋值给一个列表，最后一个元素赋值给另一个变量，并打印这些变量的值。
"""
a=(1,2,3,4,5)
a,*b,c=a
print(a,b,c)
"""
练习项目8：元组的方法
描述：
1. 创建一个包含多个重复元素的元组。
2. 使用 count 方法统计某个元素在元组中出现的次数，并打印结果。
3. 使用 index 方法查找某个元素在元组中的第一个索引，并打印结果。
"""
tup = (111,111,22,111,22,33,33,3,33)
print(tup.index(111))
print(tup.count(33))
"""
练习项目9：元组转换
描述：
1. 将一个列表转换为元组，并打印结果。
2. 将一个字符串转换为元组，并打印结果。
"""
a=[1,5,6,85,6,5,65,6]
print(tuple(a))
#endregion

"""
字典 基础题
"""

"""
题目1: 创建一个字典 Dict，包含键值对 'a': 1，'b': 2，'c': 3。然后打印字典。
"""
dic = {'a':1,'b':2,"c":3}
dic_1 = dict(a=1,b=2,c=3)
print(dic_1)
"""
题目2: 给定字典 Dict = {'a': 1, 'b': 2, 'c': 3}，访问键 'b' 的值，并使用 .get() 方法访问键 'd'，返回默认值 'not found'。
"""
Dict = {'a': 1, 'b': 2, 'c': 3}
print(Dict['b'])
print(Dict.get('d','Not F'))
"""
2. 修改和删除
"""

"""
题目3: 将字典 Dict 中键 'a' 的值修改为 100，并添加一个新的键值对 'd': 4。然后打印修改后的字典。

"""
Dict['a']=100
Dict['d']=4
print(Dict)
"""
题目4: 从字典 Dict 中删除键 'b'，并使用 pop() 方法删除键 'c'，打印被删除的值和最终的字典。
"""
del Dict['b']
print(Dict)
Dict.pop('c')
print(Dict)
"""
3. 遍历和方法
"""

"""
题目5: 使用 enumerate() 遍历字典 Dict 的键和值，并打印每个键值对及其索引。
"""
for i,(k,v) in enumerate(Dict.items()):
    print(i,k,v)
"""
题目6: 给定字典 Dict = {'a': 1, 'b': 2, 'c': 3}，使用字典的方法获取所有的键、所有的值和所有的键值对，分别打印。
"""
Dict = {'a': 1, 'b': 2, 'c': 3}
print(Dict.keys(),Dict.values(),Dict.items())
"""
4. 高级题
"""
"""
题目7: 给定字典 Dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}，编写一个函数 invert_dict(d)，将字典的键和值互换，并返回新的字典。
例如，invert_dict({'a': 1, 'b': 2}) 应返回 {1: 'a', 2: 'b'}。
"""
#可重复练习辨析
Dict = {'a': 1}
def invert_dict(d):
    print("before change:{}".format(d))
    inv={}
    for key,values in d.items():
        inv[values]=key
    print("after:{}".format(d))
    print(inv)
invert_dict(Dict)
"""

"""

"""
题目9: 给定一个字典 Dict = {'a': 1, 'b': 2, 'c': 3, 'a': 4}，解释为什么字典中键 'a' 的值是 4 而不是 1。
"""
print("""在 Python 中，字典是由键值对组成的数据结构，其中每个键必须是唯一的。
如果在创建或更新字典时，使用了相同的键，那么后面的赋值操作会覆盖前面的赋值操作""")
"""
题目10: 编写一个函数 merge_dicts(*dicts)，可以接收任意数量的字典参数，并将它们合并成一个字典。如果有重复的键，保留最后一个字典中的键值对。例如，merge_dicts({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) 应返回 {'a': 1, 'b': 3, 'c': 4}。
"""

# 在这里你可以开始实现每个练习项目
